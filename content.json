{"meta":{"title":"黑牛随笔","subtitle":"","description":"","author":"黑牛","url":"https://chenlingmin.github.io","root":"/"},"pages":[{"title":"友情链接","date":"2021-12-08T03:27:01.000Z","updated":"2021-12-08T03:27:25.718Z","comments":true,"path":"link/index.html","permalink":"https://chenlingmin.github.io/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-12-08T03:29:54.000Z","updated":"2021-12-08T03:30:18.018Z","comments":true,"path":"tags/index.html","permalink":"https://chenlingmin.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"表格驱动法优化","slug":"表格驱动法与NavigableMap的使用","date":"2021-12-08T02:44:55.000Z","updated":"2021-12-08T05:38:55.090Z","comments":true,"path":"2021/12/08/表格驱动法与NavigableMap的使用/","link":"","permalink":"https://chenlingmin.github.io/2021/12/08/%E8%A1%A8%E6%A0%BC%E9%A9%B1%E5%8A%A8%E6%B3%95%E4%B8%8ENavigableMap%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"表格驱动的常见形式开发中，常常会用到各种分支逻辑，if else switch case 霸屏，如下代码。 1234567if (state == 1) &#123; process1();&#125; else if (state == 2)&#123; process2();&#125; else &#123; processByDefault();&#125; 在编程的世界，只有两种元素组成，那就是数据与代码。像上面的代码，估计大家一看，除了 state 的 &#123;1, 2...&#125; 是数据的概念，其他的诸如 if else process1() process2() processByDefault() 自然也就化为代码的部分。 而代码和数据的划分，不是泾渭分明的，你写的任何代码，在编译器的角度，又成为了数据。 因此如果我们换一个角度思考上述代码，重新定义数据，可能就会得到另一个结果。 如下 1234567Map&lt;Integer, Runnable&gt; stateProcessMap = new HashMap&lt;&gt;&#123;&#123; put(1, this::process1); put(2, this::process1);&#125;&#125;;stateProcessMap.getOrDefault(state, this::processByDefault).run(); 提出了 stateProcessMap 的数据，表示 state 与业务的映射关系。 那数据的提出有什么好处呢？ 显而易见的是，以后同类结构的修改，你不再是改 if else 代码的部分，而只需要修改 stateProcessMap 数据部分。 可不要小看这一点点小改动，虽然现在 stateProcessMap 概念是数据，而载体还是在代码上，但可是动静分离的基础。 阶梯式的表格驱动在常见形式中，key 一般为静态的数据，能够用在 if (x == xx) 等于的部分，而如果面对如下的代码，可能又得继续思考了。 123456789if (distance &gt; 3) &#123; return this.avg3(); &#125; else if (distance &gt; 2) &#123; return this.avg2();&#125; else if (distance &gt; 1) &#123; return this.avg1();&#125; else &#123; return this.avg(); &#125; 上述逻辑，由于是阶梯式的逻辑，必须先从最大的数开始判断，所以无法使用常规的形式，你可以这样重新定义数据，如下： 12345678910int[] distanceLevels = &#123;3, 2, 1&#125;;Supplier[] avgLevels = &#123;this::avg3, this.avg2, this.avg1&#125;;for (int i = 0; i &lt; distanceLevels.length; i++) &#123; if (distanceLevels[i] &gt; state) &#123; return avgLevels[i].get(); &#125; return this.avg(); &#125; 上述形式，我们称为阶梯访问表，虽然不如常见形式简介，但也达到了分离了数据与代码的效果，取得了更高的扩展性。 NavigableMap 在表格驱动中阶梯逻辑的使用在上述的阶梯访问表中，也存在几个问题: 大量数据时，存在线性访问，查找成本较大 需要手工保证 key -&gt; value 的映射 应运而生的，我们想到可以使用 TreeMap，即是 key -&gt; value 的结构，又是有序的结构。 1234567NavigableMap&lt;Integer, Supplier&gt; distanceAvgMap = new TreeMap&lt;&gt; &#123;&#123; put(1, this::avg1); put(2, this::avg2); put(3, this::avg3);&#125;&#125;;distanceAvgMap.lowerEntry(distance).getValue().get(); NavigableMap 是一个可导航的 Map 接口, 上层接口为 SortedMap，顶层接口为 Map，TreeMap 是 NavigableMap 的具体实现，是一个平衡二叉树的实现，主流的实现是八股文中的红黑树，其中 lowerEntry(key) 是以二分查找法查找一个小于或等于 key 的 Entry。 这样，我们阶梯式的逻辑，就用一个二叉树的 Map 数据结构表示成了数据形式，与阶梯访问表相比，更优雅的达到了数据与代码分离的效果。","categories":[],"tags":[{"name":"编码技巧","slug":"编码技巧","permalink":"https://chenlingmin.github.io/tags/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/"}]},{"title":"Mybatis PageHelper 提供与 spring-data 一致的分页 API 的实践","slug":"MybatisPageHelper提供与spring-data一致的分页API的实践","date":"2021-12-07T08:44:55.000Z","updated":"2021-12-08T03:25:59.050Z","comments":true,"path":"2021/12/07/MybatisPageHelper提供与spring-data一致的分页API的实践/","link":"","permalink":"https://chenlingmin.github.io/2021/12/07/MybatisPageHelper%E6%8F%90%E4%BE%9B%E4%B8%8Espring-data%E4%B8%80%E8%87%B4%E7%9A%84%E5%88%86%E9%A1%B5API%E7%9A%84%E5%AE%9E%E8%B7%B5/","excerpt":"","text":"Mybatis PageHelper 提供与 spring-data 一致的分页 API 的实践spring-data 项目中，为数据访问提供熟悉且一致的基于 Spring 的编程模型，同时仍保留底层数据存储的特殊特性，其中 spring-data-jpa 更容易实践领域驱动设计的特性，尤其收开发者欢迎。 然而，面对一些比较复杂的连表查询，如果严格按照 CQRS 的方案实践，方案又会显得比较笨重。在这个背景下， jpa 与 Mybatis 的混合方案，分别发挥了 jpa 模型的长处 与 Mybatis 动态 SQL 的长处，而规避了 jpa动态 SQL 的短处与 Mybatis 模型的短处，受到了广泛的一致认可。 方案特点表现如下： Jpa 做模型的持久操作，以及单表查询。 Mybatis 只做视图的复杂查询，并且不参与业务逻辑的运算（即代替 CQRS 查询层的逻辑）。 Mybatis PageHelper 的实践在 spring-data 的中，提供了分页排序的 API 基本都是如下形状： 12Iterable&lt;T&gt; findAll(Predicate predicate, Sort sort);Page&lt;T&gt; findAll(Predicate predicate, Pageable pageable); 为了让 Mybatis 提供与 spring-data 一致的 API，我们希望使用如下： 123456@Transactional(readOnly = true)public Page&lt;OrderQueryMapper.OrderView&gt;findAll(OrderQueryMapper.OrderParam orderParam, Pageable pageable)&#123; return orderQueryMapper.findAll(orderParam, pageable);&#125; 于是，我们的 Mapper 查询层利用 page-helper 做了如下设计： 12345678910111213141516171819@Mapperpublic interface OrderQueryMapper &#123; List&lt;OrderView&gt; findAll(OrderParam orderParam); default List&lt;OrderView&gt; findAll(OrderParam param, Sort sort) &#123; return QueryHelper.sort(this::findAll, param, sort); &#125; default Page&lt;OrderView&gt; findAll(OrderParam param, Pageable pageable) &#123; return QueryHelper.page(this::findAll, param, pageable); &#125; @Data class OrderParam &#123; private String orderId; &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public abstract class QueryHelper &#123; /** * @param mapperMethod 查询方法 * @param param 查询参数 * @param pageable 分页参数 * @param &lt;RESULT&gt; 结果类型 * @param &lt;PARAM&gt; 参数类型 * @return */ public static &lt;RESULT, PARAM&gt; Page&lt;RESULT&gt; page(Function&lt;PARAM, List&lt;RESULT&gt;&gt; mapperMethod, PARAM param, Pageable pageable) &#123; String orderBy = Optional.of(pageable.getSort()) .map(Iterable::spliterator) .map(i -&gt; StreamSupport.stream(i, false)) .orElseGet(Stream::empty) .map(a -&gt; a.getProperty() + &quot; &quot; + a.getDirection().name()) .collect(Collectors.joining(&quot;,&quot;)); // 注意 pageHelper 的 pageNum 从 1 开始 PageHelper.startPage(pageable.getPageNumber() + 1, pageable.getPageSize(), orderBy); try &#123; com.github.pagehelper.Page&lt;RESULT&gt; result = (com.github.pagehelper.Page&lt;RESULT&gt;) mapperMethod.apply(param); return new PageImpl&lt;&gt;(result.getResult(), pageable, result.getTotal()); &#125; finally &#123; PageHelper.clearPage(); &#125; &#125; /** * @param mapperMethod 查询方法 * @param param 查询参数 * @param sort 排序参数 * @param &lt;RESULT&gt; 结果类型 * @param &lt;PARAM&gt; 参数类型 * @return */ public static &lt;RESULT, PARAM&gt; List&lt;RESULT&gt; sort(Function&lt;PARAM, List&lt;RESULT&gt;&gt; mapperMethod, PARAM param, Sort sort) &#123; String orderBy = Optional.ofNullable(sort) .map(Iterable::spliterator) .map(i -&gt; StreamSupport.stream(i, false)) .orElseGet(Stream::empty) .map(a -&gt; a.getProperty() + &quot; &quot; + a.getDirection().name()) .collect(Collectors.joining(&quot;,&quot;)); PageHelper.orderBy(orderBy); try &#123; return mapperMethod.apply(param); &#125; finally &#123; PageHelper.clearPage(); &#125; &#125;&#125;","categories":[],"tags":[{"name":"编码技巧","slug":"编码技巧","permalink":"https://chenlingmin.github.io/tags/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/"}]},{"title":"关于枚举的高级用法","slug":"枚举的高级用法","date":"2021-12-07T08:34:55.000Z","updated":"2021-12-08T05:38:37.107Z","comments":true,"path":"2021/12/07/枚举的高级用法/","link":"","permalink":"https://chenlingmin.github.io/2021/12/07/%E6%9E%9A%E4%B8%BE%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/","excerpt":"","text":"关于枚举的高级用法枚举回顾Java 中的枚举，大家都不会陌生，他的一些特点，能让我们得心应手的实现业务逻辑。 它的单例特性，我们就可以直接使用 == 来做逻辑校验，如: 1234567public enum Gender &#123; MAN, WOMAN;&#125;if (Gender.MAN == gender) &#123; // do something&#125; 也可以直接实现一个线程单例，JVM 层面提供的保障 123456789101112131415161718192021public class SingleEnumDemo &#123; public enum SingleEn &#123; INSTANCE; private String name; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; &#125; public static void main(String[] args) &#123; SingleEn.INSTANCE.setName(&quot;zp&quot;); System.out.println(SingleEn.INSTANCE.getName()); &#125;&#125; 还能校验参数是否非法，使用 valueOf 方法 1234567public enum Gender &#123; MAN, WOMAN;&#125;if (null == Gender.valueOf(&quot;xxxxx&quot;)) &#123; throw new IllegalArgumentException();&#125; 当然最常见的，还是定义各种状态，似乎觉得枚举天生就是这样用的 1234567891011@Getter@AllArgsConstructorpublic enum ShareRuleEnum &#123; REDPACKET(&quot;店鋪紅包&quot;, 1), MANJIAN(&quot;滿減優惠&quot;, 2), MANZENG(&quot;滿贈活動&quot;, 4), ZHEKOU(&quot;折扣商品&quot;, 8), ; private String shareRuleName; private Integer code;&#125; 枚举使用的其他案例某个场景，需要一个查询的接口，查询的参数有时间区间，即开始时间~结束时间。自然我们会想到，定义两个请求参数 start 、end 12345public MsgResult&lt;XXXResult&gt; get( @RequestParam Date start, @RequestParam Date end) &#123; // do something&#125; 在这个场景上，附加上了一个规则，只能使用给定的时间区间（如：今天，昨天，本月，上月…），这时大家应该能想到枚举又有用武之地了，例如： 1234567891011121314public MsgResult&lt;XXXResult&gt; get( @RequestParam DateRangeEnum dateRange) &#123; Date start, end; if (dateRange == TODAY) &#123; start = ..., end = ...; &#125; ... // do something&#125;enum DateRangeEnum &#123; TODAY, YESTEDAY, CURRENT_MONTH, LAST_MONTH;&#125; 等等…… 思考一下，我们为什么要定义枚举？是为了要约束入参的范围，这个枚举确实做到了部分，因为只能传递 TODAY，YESTEDAY, CURRENT_MONTH, LAST_MONTH。 但这些枚举值所代表的含义是什么呢？例如 TODAY 是希望 start 为今天的开始，end 为明天的开始（闭区间） 然而这些代码却没有在 DateRangeEnum 类里面体现，而写在了其他方法里面。 由此我们得出结论，我们提供的 DateRangeEnum 类表达的意思不全的，是残缺的，最起码现在看来残缺了时间区间的表达。 改进一版，提供一个时间区间的接口（面向接口编程），以及一个普通 Bean 的实现。 12345678910111213interface DateRange &#123; Date getStart(); Date getEnd();&#125;@Data@AllArgsConstructor@NoArgsConstructorclass DateRangeParam implements DateRange &#123; private Date start; private Date end;&#125; 改造枚举 DateRangeEnum, 让他能够产生时间区间，我们就利用 Java8 已经定义好了接口 Supplier，让 DateRangeEnum 实现该接口。 1234567891011121314151617181920212223242526272829303132333435public MsgResult&lt;XXXResult&gt; get( @RequestParam DateRangeEnum dateRange) &#123; DateRange range = dateRange.get(); range.getStart(); range.getEnd(); ... // do something&#125;enum DateRangeEnum implements Supplier&lt;DateRange&gt; &#123; TODAY &#123; @Override public DateRange get() &#123; Date now = new Date(); return new DateRangeParam( truncate(now, Calendar.DATE), addDays(truncate(now, Calendar.DATE), 1) ); &#125; &#125;, YESTERDAY &#123; @Override public DateRange get() &#123; Date now = new Date(); return new DateRangeParam( addDays(truncate(now, Calendar.DATE), -1), truncate(now, Calendar.DATE) ); &#125; &#125;, // ...省略本月、上月的实现... ;&#125; 这样，枚举中就包含了时间区间的含义了，通过调用枚举的 get 方法，如 TODAY.get() ，就能获取时间区间 DateRange 了。 这就是枚举的高级用法，『高级』其实指的不是技术上的高级，无非是实现了接口而已，而是把枚举需要表达的含义（如 TODAY 要表达的含义是今天到明天）表达清楚、表达完整。 进阶🤔以上代码还有什么问题么？例如如何进行单元测试？","categories":[],"tags":[{"name":"编码技巧","slug":"编码技巧","permalink":"https://chenlingmin.github.io/tags/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/"}]}],"categories":[],"tags":[{"name":"编码技巧","slug":"编码技巧","permalink":"https://chenlingmin.github.io/tags/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/"}]}